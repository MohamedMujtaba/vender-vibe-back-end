generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  // useMultipleFiles                 =  false  //  default is false
  // createInputTypes                 =  false  //  default is true
  // createModelTypes                 =  true   //  default is true
  // addInputTypeValidation           =  false  //  default is true
  // addIncludeType                   =  false  //  default is true
  // addSelectType                    =  false  //  default is true
  // validateWhereUniqueInput         =  true   //  default is false
  // createOptionalDefaultValuesTypes =  true   //  default is false
  // createRelationValuesTypes        =  true   //  default is false
  // createPartialTypes               =  true   //  default is false
  // useDefaultValidators             =  false  //  default is true
  // coerceDate                       =  false  //  default is true
  // writeNullishInModelTypes         =  true   //  default is false
}

// generator erd {
//   provider = "prisma-erd-generator"
//   theme    = "forest"
//   erdDebug = true
// }

// Object {
//   "email": "xxxxx@gmail.com",
//   "email_verified": true,
//   "family_name": "John Deer",
//   "given_name": "John",
//   "hd": "gmail.com",
//   "locale": "en",
//   "name": "John Deer",
//   "picture": "https://lh3.googleusercontent.com/a/asdfjasdklfjaslkf",
//   "sub": "10998837733652322",
// }

model Business {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String       @unique
  password         String
  phoneNumber      String       @unique
  state            String
  location         String
  neighborhood     String
  type             BusinessType
  orders           Order[]
  wishLists        WishList[]
  productsLikedIds String[]     @db.ObjectId
  createdAt        DateTime     @default(now()) @map(name: "created_at")
  updatedAt        DateTime     @updatedAt @map(name: "updated_at")

  likedProducts Product[]        @relation(fields: [productsLikedIds], references: [id])
  session       BusinessSession?
}

model WishList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  businessId  String   @db.ObjectId
  companyId   String   @db.ObjectId
  productsIds String[] @db.ObjectId
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  business Business  @relation(fields: [businessId], references: [id])
  company  Company   @relation(fields: [companyId], references: [id])
  products Product[] @relation(fields: [productsIds], references: [id])

  @@index([businessId])
}

model Company {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       BusinessType
  active     Boolean      @default(true)
  logo       String
  products   Product[]
  orders     Order[]
  workers    Worker[]
  coupons    Coupon[]
  WishList   WishList[]
  categories Category[]
  createdAt  DateTime     @default(now()) @map(name: "created_at")
  updatedAt  DateTime     @updatedAt @map(name: "updated_at")
}

enum BusinessType {
  HOSPITAL
  PHARMACY
  GROCERY
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  dec             String?
  image           String?
  price           Int
  oldPrice        Int?
  available       Boolean  @default(true)
  hot             Boolean  @default(false)
  freeShipping    Boolean  @default(true)
  views           String[] @default([])
  companyId       String   @db.ObjectId
  categoryIds     String[] @db.ObjectId
  businessLikeIds String[] @db.ObjectId
  wishListIds     String[] @db.ObjectId
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")

  company    Company    @relation(fields: [companyId], references: [id])
  categories Category[] @relation(fields: [categoryIds], references: [id])
  likes      Business[] @relation(fields: [businessLikeIds], references: [id])
  wishLists  WishList[] @relation(fields: [wishListIds], references: [id])

  @@index([companyId])
}

model Worker {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phoneNumber String     @unique
  password    String
  role        WorkerRole
  companyId   String     @db.ObjectId
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")

  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

enum WorkerRole {
  ADMIN
  SUPERVISOR
  DELIVERY
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  subtotal   Float
  delivery   Float
  discount   Float
  total      Float
  items      OrderItem[]
  businessId String?     @db.ObjectId
  companyId  String?     @db.ObjectId
  couponId   String?     @db.ObjectId
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @updatedAt @map(name: "updated_at")

  Business Business? @relation(fields: [businessId], references: [id])
  Company  Company?  @relation(fields: [companyId], references: [id])
  coupon   Coupon?   @relation(fields: [couponId], references: [id])

  @@index([companyId])
  @@index([businessId])
}

type OrderItem {
  id           String
  name         String
  size         String
  color        String
  price        Int
  freeShipping Boolean  @default(false)
  image        String[]
}

model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId String?  @db.ObjectId
  code      String
  amount    Float
  isValid   Boolean
  active    Boolean  @default(false)
  orders    Order[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Company Company? @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  companyId   String   @db.ObjectId
  productsIds String[] @db.ObjectId
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  company  Company   @relation(fields: [companyId], references: [id])
  products Product[] @relation(fields: [productsIds], references: [id])

  @@index([companyId])
}

model BusinessSession {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  accessToken String
  businessId  String @unique @db.ObjectId

  business Business @relation(fields: [businessId], references: [id])
}
